page,block,heading,content,avgFontSize,height,width,textLength,x0,y0,x1,y1,isBold,isItalic
1,0,H1,Fact gathering: the first and most important task in software negotiations,38,150.99,360.77,74,371.8,213.56,732.57,364.55,FALSE,FALSE
2,0,H1,Table of Contents,34,22.39,260.33,17,194.4,98.01,454.73,120.4,FALSE,FALSE
4,0,H1,Software is not static,34,22.39,314.3,22,194.4,98.01,508.7,120.4,FALSE,FALSE
5,0,H1,A software provider will not be the author of and will not “own” the copyright in all of the software that is being delivered,34,136.42,530.86,125,194.4,98.01,725.26,234.44,FALSE,FALSE
7,0,H1,"Software will be developed with a set of tools, which can be important to the delivery of software and solutions",34,136.42,447.95,112,194.4,98.01,642.35,234.44,FALSE,FALSE
9,0,H1,Many of the most valuable third-party components and tools are made available under open source licenses,34,136.42,469.54,104,194.4,98.01,663.94,234.44,FALSE,FALSE
10,0,H1,Software licenses can be categorized in unlimited ways,34,60.4,439.61,54,194.4,98.01,634.01,158.42,FALSE,FALSE
11,0,H1,Some of the most essential and widely used software is provided under the GPL and other copyleft licenses,34,136.42,444.19,105,194.4,98.01,638.59,234.44,FALSE,FALSE
12,0,H1,Conclusion,34,22.39,163.49,10,194.4,98.01,357.89,120.4,FALSE,FALSE
3,0,H1,Introduction by Karen Copenhaver:,20.67,22.39,317.41,33,194.4,98.01,511.81,120.4,FALSE,FALSE
4,2,H2,The software that will be developed will evolve as it is developed.,18,60.25,227.87,67,194.4,140.01,422.27,200.26,TRUE,FALSE
4,4,H2,Software will change continuously over the course of its normal life.,18,60.25,216.6,69,475.2,246,691.8,306.25,TRUE,FALSE
3,1,BODY,"When I began practicing law 30 years ago, I had a fabulous manager. He always reminded all of us that practicing law is ninety percent fact gathering and ten percent legal analysis. You cannot do the legal analysis until you fully understand the facts. If our drafting was vague, it was almost always because we were writing around facts that we didn’t fully understand. We were leaving space because we could not be precise.",12,71.9,538.22,425,194.4,118.51,732.62,190.41,FALSE,FALSE
2,1,H1,"Introduction ...........................................................................................................3 Software is not static ............................................................................................4 A software provider will not be the author of all of the software that is being delivered ....................................................5 Software will be developed with a set of tools, which can be important to the delivery of software and solutions .................................7 Many of the most valuable third-party components and tools are made available under open source licenses .............................9 Software licenses can be categorized in unlimited ways ................................10 Some of the most essential and widely used software is provided under the GPL and other copyleft licenses ...................................11 Conclusion .............................................................................................................12",11,224.27,391.07,1023,194.39,160.43,585.46,384.7,FALSE,FALSE
1,1,BODY,Karen Copenhaver and Steve Winslow,10,6.6,178.11,34,371.8,389.56,549.91,396.15,FALSE,FALSE
3,2,BODY,"What is true of individual lawyers is also true of groups with ridiculous assumptions about writing software of lawyers and procurement professionals attempting from scratch, the credibility of the procurement to negotiate an agreement. If both parties shared process is undermined, and, in the future, they will a common understanding of the facts, drafting the find ways to avoid or delay involving procurement and agreement would be much more efficient. By facts, counsel. Where the parties write around what they do I mean details about the context of the agreement not understand, the agreement that results will be full that are fixed and verifiable. I am not suggesting of vague or inaccurate language. that the parties could or need to share opinions or a shared vision of how the relationship might unfold. I am thinking about negotiators who do not know what the human beings employed by both parties who will perform the work all know to be true. As an easy example, when the people negotiating a software development agreement do not know that the developers for both parties assume that the software will include many pre-existing components, the process will be horribly inefficient. This is more than just a waste of time. When the developers are confronted",10,219.6,538.69,1272,194.4,247.65,733.09,467.25,FALSE,FALSE
3,3,BODY,The purpose of this article is to lay out some basic facts about how software is developed and works today in an attempt to help procurement professionals and their legal counsel avoid making factual assumptions that will undermine their credibility and delay negotiations.,10,54.6,265.4,273,475.2,340.65,740.6,395.25,FALSE,FALSE
4,1,BODY,"the people who will actually perform the work. They may know that the list will change often, and they do not want to amend the agreement every time they consider, include, or replace a component. A process acceptable to both parties that allows for the rapid evolution of the work to be performed will be welcomed.",10,78.6,253.22,315,475.2,132,728.42,210.6,FALSE,FALSE
4,3,BODY,"In the early days of the software industry, attorneys assumed that they could comprehensively capture a business relationship in the written contract. The agreement would include detailed specifications for the product to be developed, and there would be a project timeline with milestones tied to achieving those specifications. When the agreement was executed, usually after many months of negotiations, the parties knew exactly what they were contractually obligated to deliver and when. Even then, this was a myth. Software is never “finished” until it is uninstalled. If we required a detailed, final specification for in the operating environment and to apply patches development before the parties could begin work that become available to eliminate potential security today, we would only be assured that the results would vulnerabilities. If the software is not updated, that be too late to market to be valuable. Agreements today should be a sign that necessary software maintenance is have to be focused on establishing the process for not occurring. And changes in the hardware or software working together to develop something which neither operating environment provide opportunities to improve party can fully define or envision. In other words, the software functionality. The agreement should not be only thing we know is that what we develop together written based on the assumption that all development will change as the work is performed, the operating will come to a conclusion at any point prior to the end of environment is updated, and the market changes.the life of the software. Thus, requiring that a fixed list of the specific software components that will be used in the development be included in the agreement may not make sense to",10,294.6,546.19,1763,194.4,216,740.59,510.6,FALSE,FALSE
4,5,BODY,Constant updating is required to accommodate changes,10,6.6,261.09,52,475.2,336,736.29,342.6,FALSE,FALSE
5,1,BODY,"A company that provides software will almost never ubiquitous its value is rarely acknowledged. Without be the sole author, nor the sole copyright owner, of the using the libraries and/or interfaces that provide entirety of what they provide to the recipient. Software access to this infrastructure, the software cannot be will include components owned and developed by third developed, tested, or deployed. parties and will rely on dependencies that may not be part of the distributed package of software. In addition to what is developed and delivered as part of the agreement, all software operates within one or Developers do not sit down to develop software with more ecosystems of third-party dependencies that are a clean sheet of paper – just as lawyers do not sit necessary for its optimal use and performance. down to draft agreements from scratch. They make use of templates and libraries both for efficiency and This was the case even when software was something for efficacy. Software libraries that have been in use that was typically purchased in physical form for many years and have been deployed for many and installed from a floppy disk or CD-ROM: the purposes benefit from the fixes and improvements software’s packaging would list its minimum system provided by others. As a highly regarded technical requirements, which could include hardware, software, expert said in a negotiation, “Believe me. You do not services (such as sufficient Internet bandwidth) and want anyone writing a new math library from scratch so more. The purchaser reasonably needs to know what that you can own it.” those dependencies are. Still, the purchaser might not reasonably expect that the provider is going to make Because software does not operate in a vacuum, contractual commitments regarding the entire stack of components, and interfaces written by third parties are those dependencies. necessary for the software to function. For example, applications installed on a laptop use interfaces in the In modern software ecosystems, the situation operating system. The functionality provided over a is exponentially more complicated. Leveraged network sits on top of a stack of software that is so dependencies might be needed when the software is",10,294.59,543.18,2250,194.4,252,737.58,546.59,FALSE,FALSE
6,0,BODY,"built, or when it is installed, or when it runs.  copyright holder of all relevant code that is utilized by The software provider might not deliver these the software, then the price would be astronomically dependencies to the purchaser at all but might instead higher because every software product would require provide only a manifest file listing the dependencies or a starting from scratch and disregarding the ecosystems recipe for how to install and configure the dependency of established, well-tested, pre-existing code. environment. As part of the installation process, the purchaser would use these manifests and recipes to obtain those dependencies directly from the upstream third parties that make them publicly available. The use of these dependencies will directly influence the price at which the software provider offers their software for sale. If the software provider was contractually required to be the original author or",10,162.6,540.56,944,194.4,84,734.96,246.6,FALSE,FALSE
7,1,BODY,"Just as lawyers rely on a word processing program to These tools operate within their own very complex write an agreement, software developers use software operating environment. They are not like hammers tools to make development more efficient. These and screwdrivers that can be put into a box and tools are often the most complex software involved used separately. The phrase that is commonly used in the development project and the amount of code is “development environment” because the tools are in this development environment will almost always integrated into a complex ecosystem and are not useful far exceed the amount of code in the developed or necessarily trustworthy outside of that ecosystem. deliverable. And this software will change and evolve just as the software that is being developed will change To “deliver” the entire development environment and evolve. Knowing the specific facts related to the is often impractical for a number of reasons. The collection of tools used to develop this software is company asking for it to be delivered may not have essential to avoid unworkable approaches.sufficient equipment or technical employees even to install the software, much less maintain it. And no one Sometimes the development environment will be a would deploy software developed by individuals at the third-party product that can be acquired directly from bottom of a learning curve. In one negotiation that was the third party. If a version of the third-party product hung up on a demand to deliver all of the tools used that is being used is specified, the customer will be in development, a technical person employed by the able to replicate and maintain that development company making the demand, when asked to weigh in environment should it ever be needed. on the request replied, “We wouldn’t know what to do Other times, the reason to hire a specific company to do the work is that they have a well-established, unique To deliver any code at a single point in time, without a development environment, and, just as important, plan for someone to maintain the code going forward, a set of highly skilled developers trained to use it. is not useful. The following day that software may be",10,282.59,545.42,2220,194.4,252,739.82,534.59,FALSE,FALSE
7,2,BODY,with it if we had it.”,10,6.6,92.15,22,475.2,480,567.35,486.6,FALSE,FALSE
8,0,BODY,"dangerously out of date. Similarly, establishing a source know that the delivered code will never be used, is code escrow arrangement may be a significant amount experienced by developers as a frustrating waste of of effort for very little practical risk mitigation. Access valuable resources that will delay the work everyone to some version of some amount of source code will wants the vendor to perform. not be of much practical use to a purchaser who does not have the specifically-configured development environment in which it was built or experience with how to build and deploy it. Deciding to put an entire development environment, the hardware, software toolchain, and source code into escrow would be prohibitively expensive. Delivering the code in a development environment is an enormous amount of work that must be performed by highly skilled individuals - often the same individuals who are required to perform the work you have engaged the vendor to perform. Requiring delivery of the development environment as a contract solution where the technical employees of both companies",10,222.6,529.95,1095,194.4,84,724.35,306.6,FALSE,FALSE
9,1,BODY,"It is almost never possible to fulfill a contractual If all of your competitors are using these valuable open requirement not to use open source software in source assets, and you do not, it will be difficult to be development. There are extremely valuable compilers competitive on cost, quality, maintenance, and security. and other development tools that are used in One of the most important reasons to use open source essentially all software development environments is to benefit from the advantages of shared support that are made available under open source licenses. across an ecosystem. Depending on the analyst firm, most estimates suggest 70-90% of all the code in a system will be built from open source software. And even proprietary, purchased solutions that your technical team currently uses are very likely built in large part with open source components. Unless your own technical people agree that there should be no open source code of any kind used in its development, do not ask for a representation or warranty that there will be no open source from a contractor or supplier. If software made available under an open source license will be used, the relevant questions you should ask relating to the selection of the code, maintenance of the code, and compliance with the applicable license terms in the specific use case. And all of these are questions that should be asked about both open source and non-open source software.",10,282.59,544.91,1451,194.4,252,739.31,534.59,FALSE,FALSE
10,1,BODY,"There are many software licenses. Some are licenses that trying to define a separate category of Open Source the Open Source Initiative (https://opensource.org/) has Software is not helpful in reaching an agreement. This approved as consistent with the Open Source Definition will become more important if the licenses for some (https://opensource.org/osd-annotated). Some are essential third-party components no longer seek OSI licenses that are similar to those licenses but have approval. Aside from how the open source ecosystem never been approved. Some are sufficiently different may categorize licenses, all software licensed from third from those licenses that they would not be considered parties should be evaluated under the same criteria for by people familiar with this terminology to be “open.” your project. Others are clearly what would be generally referred to as “commercial” or “proprietary” licenses. In other words, Because of the wide variety of licenses with similar there is a broad spectrum. And there are more licenses effect but minor variations in wording, it may be to put on that spectrum every day. The SPDX License unintentionally detrimental to require that only OSI- List (https://spdx.org/licenses/) has been curated by approved licenses may be used for all dependencies or lawyers working in the open source ecosystem and components. identifies many of the licenses that frequently come up in reviews and negotiations. The question is: does any practical difference arise in any specific contractual context based on exactly where a license falls on that spectrum? In every context that I can think of, contractual concerns regarding the license applicable to third party software components (selection of the code, maintenance of the code, and compliance with the applicable license terms) will be the same regardless of where that license falls on any spectrum of license types. Spending time and energy",10,306.6,546.22,1941,194.4,168,740.62,474.6,FALSE,FALSE
11,1,BODY,"In modern computing, a great amount of the most The perception of the GPL and its variants as being valuable and useful software components and tools are unworkable open source licenses is also inaccurate. made available under a version of the Free Software Keep in mind that the GPL, like all free and open source Foundation’s General Public License (the “GPL”) or licenses, does not restrict your usage. As a recipient another license that is commonly referred to as a of GPL software, you have far more expansive license copyleft, reciprocal or sharing license. rights to use the software than you have under a proprietary software license agreement. Compliance GPL-licensed software such as the GCC Compiler with the GPL upon a redistribution of the code may be and the Linux operating system is used by the vast a factor to consider. Still, it is unlikely that you would majority of companies and industries around the have the right to redistribute any proprietary software world. Contrary to urban legend, it is not impossible at all.  If your technical people are certain that you will for commercial companies to comply with copyleft not be redistributing the GPL code, then negotiating for obligations. It is not impossible to use both copyleft a “no GPL allowed” provision in an agreement where software and independent software that is not subject you are acquiring software is essentially negotiating to to the copyleft obligations. Companies do this in careful receive fewer rights than you otherwise might have. compliance with the license requirements every day all around the world. Unless your technical people agree that there should The distribution of the software usually triggers in its development or provided in the work product, be no GPL or copyleft licensed code of any kind used copyleft obligations to provide source code. Many do not ask for a representation or warranty that businesses are built on top of the GPL-licensed  there will be no copyleft software. Once again, the Linux operating system and other copyleft software relevant questions related to the selection of the code, that is used in the business to provide services but  maintenance of the code, and compliance with the not distributed. applicable license terms in the relevant use case.",10,282.59,543.75,2286,194.4,252,738.15,534.59,FALSE,FALSE
12,1,BODY,"If we only can make one point, it is that lawyers any benefit if the policy does not reflect the reality and procurement professionals should not even of your developers’ actual technical operations. attempt to dictate how software development will be Taking the time to gather the facts so you can work accomplished. If negotiations hit a rough patch, take from the same knowledge-base as those of your own the time to confirm that the real issue is risk allocation. employees who will actually do or oversee the work Make sure that the dispute is not due to insistence on to be performed will save time and result in a better facts that your technical team does not believe to be agreement and relationship. true. This is particularly difficult when longstanding corporate policies are out of step with current realities. A company can have a “no GPL policy.” Still, it cannot operate in most industries without dependence upon the Linux operating system, which is GPL-licensed software. Relying on the policy as an all-powerful argument does not change that fact, nor does it add",10,174.6,538.26,1082,194.4,132,732.66,306.6,FALSE,FALSE
13,0,BODY,"The Linux Foundation promotes, protects and standardizes Linux by providing unified resources and services needed for open source to successfully compete with closed platforms. To learn more about The Linux Foundation or our other initiatives please visit us at www.linuxfoundation.org",10,88.66,263.46,285,457.2,474,720.66,562.66,FALSE,FALSE
1,2,BODY,www.linuxfoundation.org,8,5.28,98.33,23,54,558,152.33,563.28,FALSE,FALSE
2,2,BODY,Fact gathering: the first and most important task in software negotiations2,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
2,3,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
3,4,BODY,Fact gathering: the first and most important task in software negotiations3,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
3,5,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
4,6,BODY,Fact gathering: the first and most important task in software negotiations4,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
4,7,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
5,2,BODY,Fact gathering: the first and most important task in software negotiations5,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
5,3,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
6,1,BODY,Fact gathering: the first and most important task in software negotiations6,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
6,2,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
7,3,BODY,Fact gathering: the first and most important task in software negotiations7,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
7,4,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
8,1,BODY,Fact gathering: the first and most important task in software negotiations8,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
8,2,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
9,2,BODY,Fact gathering: the first and most important task in software negotiations9,7,4.96,344.05,75,54,592.18,398.05,597.14,FALSE,FALSE
9,3,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
10,2,BODY,Fact gathering: the first and most important task in software negotiations10,7,4.96,346.16,76,54,592.18,400.16,597.14,FALSE,FALSE
10,3,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
11,2,BODY,Fact gathering: the first and most important task in software negotiations11,7,4.96,346.08,76,54,592.18,400.08,597.14,FALSE,FALSE
11,3,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
12,2,BODY,Fact gathering: the first and most important task in software negotiations12,7,4.96,346.12,76,54,592.18,400.12,597.14,FALSE,FALSE
12,3,BODY,The Linux Foundation,7,4.62,73.28,20,664.73,592.18,738,596.79,FALSE,FALSE
